import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroupDirective } from '@angular/forms';
import { MatFormField, MatLabel } from '@angular/material/form-field';
import { ActivatedRoute } from '@angular/router';
import { Store } from '@ngrx/store';
import { MockStore, provideMockStore } from '@ngrx/store/testing';
import { cold } from 'jasmine-marbles';
import { MockComponents, MockDirective } from 'ng-mocks';
import { BehaviorSubject, of } from 'rxjs';
import { AppState } from '../../redux/app-state.interface';
import { EditPageComponent } from './edit-page.component';
import { fetchEditPageData } from './redux/actions/fetch-edit-page-data.actions';

describe('EditPageComponent', (): void => {
  const initialState: AppState = {
    heroes: [
      {
        id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
        firstName: 'George',
        lastName: 'Washington',
        fullName: 'George Washington',
        phoneNumber: '(703) 111-1111',
        avatarUrl: 'https://avatar.com/george-washington/profile.jpg',
      },
      {
        id: '26bbe379-b165-4ccf-b993-aefff76b4790',
        firstName: 'John',
        lastName: 'Wayne',
        fullName: 'John Wayne',
        phoneNumber: '(210) 555-5555',
        avatarUrl: 'https://avatar.com/jwayne/profile.jpg',
      },
    ],
  };

  let component: EditPageComponent;
  let fixture: ComponentFixture<EditPageComponent>;
  let store: MockStore;
  let dispatchSpy: jasmine.Spy;

  beforeEach(async((): void => {
    TestBed.configureTestingModule({
      providers: [
        provideMockStore({ initialState }),
        {
          provide: ActivatedRoute,
          useValue: {
            params: of({ id: 'db3ee04b-05be-4403-9d48-807fb29717ec' }),
          },
        },
      ],
      declarations: [
        EditPageComponent,
        MockComponents(MatFormField, MatLabel),
        MockDirective(FormGroupDirective),
      ],
    }).compileComponents();
  }));

  beforeEach((): void => {
    store = TestBed.inject(MockStore);
    dispatchSpy = spyOn(store, 'dispatch');
    fixture = TestBed.createComponent(EditPageComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', (): void => {
    expect(component).toBeTruthy();
  });

  it('should dispatch the fetch edit data action', (): void => {
    expect(dispatchSpy).toHaveBeenCalledTimes(1);
    expect(dispatchSpy).toHaveBeenCalledWith(fetchEditPageData());
  });

  it(
    'should subscribe to the Store for the hero matching the route ' +
      'parameter and update the hero Observable when the route parameter ' +
      'changes',
    (): void => {
      // Arrange
      const paramsBehaviorSubject = new BehaviorSubject<{ id: string }>({
        id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
      });
      const activatedRoute = {
        params: paramsBehaviorSubject.asObservable(),
      };
      // Set up a new component to avoid polluting other tests
      component = new EditPageComponent(
        store as Store<AppState>,
        (activatedRoute as unknown) as ActivatedRoute,
      );

      // Assert
      expect(component.hero$).toBeObservable(
        cold('(-n)', {
          n: {
            id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
            firstName: 'George',
            lastName: 'Washington',
            fullName: 'George Washington',
            phoneNumber: '(703) 111-1111',
            avatarUrl: 'https://avatar.com/george-washington/profile.jpg',
          },
        }),
      );

      // Act
      paramsBehaviorSubject.next({
        id: '26bbe379-b165-4ccf-b993-aefff76b4790',
      });

      // Assert
      expect(component.hero$).toBeObservable(
        // switchMap maps to the new inner Observable generated by the Store
        // Selector and completes the previous inner Observable
        cold('(-n)', {
          n: {
            id: '26bbe379-b165-4ccf-b993-aefff76b4790',
            firstName: 'John',
            lastName: 'Wayne',
            fullName: 'John Wayne',
            phoneNumber: '(210) 555-5555',
            avatarUrl: 'https://avatar.com/jwayne/profile.jpg',
          },
        }),
      );
    },
  );
});

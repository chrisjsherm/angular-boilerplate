import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';
import { FormGroupDirective, ReactiveFormsModule } from '@angular/forms';
import { MatError, MatFormField, MatLabel } from '@angular/material/form-field';
import { By } from '@angular/platform-browser';
import { ActivatedRoute, RouterLinkWithHref } from '@angular/router';
import { Store } from '@ngrx/store';
import { MockStore, provideMockStore } from '@ngrx/store/testing';
import { cold } from 'jasmine-marbles';
import { MockComponents, MockDirectives } from 'ng-mocks';
import { BehaviorSubject, of } from 'rxjs';
import { AppState } from '../../redux/app-state.interface';
import { EditPageComponent } from './edit-page.component';
import { fetchEditPageData } from './redux/actions/fetch-edit-page-data.actions';

describe('EditPageComponent', (): void => {
  const initialState: AppState = {
    heroes: [
      {
        id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
        firstName: 'George',
        lastName: 'Washington',
        fullName: 'George Washington',
        phoneNumber: '(703) 111-1111',
        avatarUrl: 'https://avatar.com/george-washington/profile.jpg',
      },
      {
        id: '26bbe379-b165-4ccf-b993-aefff76b4790',
        firstName: 'John',
        lastName: 'Wayne',
        fullName: 'John Wayne',
        phoneNumber: '(210) 555-5555',
        avatarUrl: 'https://avatar.com/jwayne/profile.jpg',
      },
    ],
  };

  let component: EditPageComponent;
  let fixture: ComponentFixture<EditPageComponent>;
  let store: MockStore;
  let dispatchSpy: jasmine.Spy;

  beforeEach(
    waitForAsync((): void => {
      TestBed.configureTestingModule({
        imports: [ReactiveFormsModule],
        providers: [
          provideMockStore({ initialState }),
          {
            provide: ActivatedRoute,
            useValue: {
              params: of({ id: 'db3ee04b-05be-4403-9d48-807fb29717ec' }),
            },
          },
        ],
        declarations: [
          EditPageComponent,
          MockComponents(MatFormField, MatLabel, MatError),
          MockDirectives(RouterLinkWithHref),
        ],
      }).compileComponents();
    }),
  );

  beforeEach((): void => {
    store = TestBed.inject(MockStore);
    dispatchSpy = spyOn(store, 'dispatch');
    fixture = TestBed.createComponent(EditPageComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', (): void => {
    expect(component).toBeTruthy();
  });

  describe('initialization', (): void => {
    it('should dispatch the fetch edit data action', (): void => {
      expect(dispatchSpy).toHaveBeenCalledTimes(1);
      expect(dispatchSpy).toHaveBeenCalledWith(fetchEditPageData());
    });

    it(
      'should subscribe to the Store for the hero matching the route ' +
        'parameter and update the hero Observable when the route parameter ' +
        'changes',
      (): void => {
        // Arrange
        const paramsBehaviorSubject = new BehaviorSubject<{ id: string }>({
          id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
        });
        const activatedRoute = {
          params: paramsBehaviorSubject.asObservable(),
        };
        // Set up a new component to avoid polluting other tests
        component = new EditPageComponent(
          store as Store<AppState>,
          (activatedRoute as unknown) as ActivatedRoute,
        );

        // Assert
        expect(component.hero$).toBeObservable(
          cold('(-n)', {
            n: {
              id: 'db3ee04b-05be-4403-9d48-807fb29717ec',
              firstName: 'George',
              lastName: 'Washington',
              fullName: 'George Washington',
              phoneNumber: '(703) 111-1111',
              avatarUrl: 'https://avatar.com/george-washington/profile.jpg',
            },
          }),
        );

        // Act
        paramsBehaviorSubject.next({
          id: '26bbe379-b165-4ccf-b993-aefff76b4790',
        });

        // Assert
        expect(component.hero$).toBeObservable(
          // switchMap maps to the new inner Observable generated by the Store
          // Selector and completes the previous inner Observable
          cold('(-n)', {
            n: {
              id: '26bbe379-b165-4ccf-b993-aefff76b4790',
              firstName: 'John',
              lastName: 'Wayne',
              fullName: 'John Wayne',
              phoneNumber: '(210) 555-5555',
              avatarUrl: 'https://avatar.com/jwayne/profile.jpg',
            },
          }),
        );
      },
    );

    it("should initialize the form with the hero's current values", (): void => {
      // Arrange
      fixture.detectChanges();
      const formElement: HTMLElement = fixture.debugElement.query(
        By.directive(FormGroupDirective),
      ).nativeElement;

      // Assert
      expect(formElement).toBeDefined();

      // Arrange
      const inputControls: HTMLCollectionOf<HTMLInputElement> = formElement.getElementsByTagName(
        'input',
      );
      const firstNameInput: HTMLInputElement = inputControls[0];
      const lastNameInput: HTMLInputElement = inputControls[1];
      const phoneNumberInput: HTMLInputElement = inputControls[2];
      const avatarUrl: HTMLInputElement = inputControls[3];

      // Assert
      expect(firstNameInput.getAttribute('formControlName')).toBe('firstName');
      expect(firstNameInput.value).toBe('George');

      expect(lastNameInput.getAttribute('formControlName')).toBe('lastName');
      expect(lastNameInput.value).toBe('Washington');

      expect(phoneNumberInput.getAttribute('formControlName')).toBe(
        'phoneNumber',
      );
      expect(phoneNumberInput.value).toBe('(703) 111-1111');

      expect(avatarUrl.getAttribute('formControlName')).toBe('avatarUrl');
      expect(avatarUrl.value).toBe(
        'https://avatar.com/george-washington/profile.jpg',
      );
    });
  });

  describe('Submit form', (): void => {
    it(
      'Should dispatch the submit edit form Action when the user submits ' +
        'a valid form',
      (): void => {
        // Assert
        expect(component.editForm.value).toEqual({
          avatarUrl: 'https://avatar.com/george-washington/profile.jpg',
          firstName: 'George',
          lastName: 'Washington',
          phoneNumber: '(703) 111-1111',
        });
        expect(component.editForm.valid).toBe(true);

        // Act
        component.onSubmit(
          'db3ee04b-05be-4403-9d48-807fb29717ec',
          component.editForm,
        );

        // Assert
        expect(dispatchSpy).toHaveBeenCalledTimes(2);
      },
    );

    it('Should not dispatch the submit Action when the form is invalid', (): void => {
      // Arrange
      component.editForm.get('avatarUrl').setValue('');

      // Assert
      expect(component.editForm.value).toEqual({
        avatarUrl: '',
        firstName: 'George',
        lastName: 'Washington',
        phoneNumber: '(703) 111-1111',
      });
      expect(component.editForm.valid).toBe(false);

      // Act
      component.onSubmit(
        'db3ee04b-05be-4403-9d48-807fb29717ec',
        component.editForm,
      );

      // Assert
      expect(dispatchSpy).toHaveBeenCalledTimes(1);
    });
  });
});
